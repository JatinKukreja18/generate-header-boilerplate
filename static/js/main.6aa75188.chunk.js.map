{"version":3,"sources":["components/control-panel/config-form/index.js","components/control-panel/index.js","components/header/List/index.js","components/header/index.js","components/editor/List/index.js","components/editor/Logo/index.js","components/editor/index.js","App.js","serviceWorker.js","index.js"],"names":["ConfigForm","state","config","namespace","htmlFile","cssFile","formActive","e","form","preventDefault","this","setState","value","console","log","_this2","react_default","a","createElement","className","ref","concat","type","placeholder","name","onClick","save","refs","configForm","editFrom","Component","ControlPanel","control_panel_config_form","List","widgetOpen","items","text","link","val","index","target","props","onListChange","prevState","Object","toConsumableArray","map","item","i","key","defaultValue","onChange","itemUpdate","addItem","Logo","Editor","addList","list","addLogo","toggleOptions","id","href","components_editor_List","components_editor_Logo","App","components_control_panel","components_editor","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6aa75188.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport \"./index.scss\";\n\nclass ConfigForm extends Component {\n  state = {\n    config: {\n      namespace: 'default',\n      htmlFile: 'index',\n      cssFile: 'index'\n    },\n    formActive: true\n\n  }\n  save(e,form){\n    e.preventDefault()\n    this.setState({\n      config : {\n        namespace: form[0].value ? form[0].value : 'default',\n        htmlFile: form[1].value ? form[1].value : 'index',\n        cssFile: form[2].value ? form[2].value : 'index',\n      },\n      formActive: false\n\n    })\n  }\n  editFrom(){\n    this.setState({\n      formActive: true\n    })\n  }\n  componentDidUpdate(){\n    console.log(this.state.config)\n  }\n  render() {\n    return (\n        <div>\n              <h4 className=\"title\">Basic Configuration</h4>\n          <form ref=\"configForm\" className={`config-form ${this.state.formActive? \"\":\"hidden\"}`}>  \n              <label className=\"form-item\">\n                Namespace\n                <input type=\"text\" placeholder=\"Namespace\" name=\"namespace\" />\n              </label>\n              <label className=\"form-item\">\n                HTML file name\n                <input type=\"text\" placeholder=\"default : index.html\" />\n              </label>\n              <label className=\"form-item\">\n                CSS file name\n                <input type=\"text\" placeholder=\"default : index.css\"/>\n              </label>\n              <button className=\"blue-button\" onClick={(e) => this.save(e, this.refs.configForm)}>Save</button>\n          </form>\n\n          <div className={`saved-form ${!this.state.formActive? \"\":\"hidden\"}`}>\n              <label className=\"form-item\">\n                Namespace: {this.state.config.namespace}\n              </label>\n              <label className=\"form-item\">\n                HTML file name: {this.state.config.htmlFile}\n              </label>\n              <label className=\"form-item\">\n                CSS file name: {this.state.config.cssFile}\n              </label>\n              <button className=\"blue-button\" onClick={()=> this.editFrom()}>Edit</button>\n          </div>\n        </div>\n    );\n  }\n}\n\nexport default ConfigForm;\n","import React, { Component } from 'react';\nimport \"./index.scss\";\nimport ConfigForm from \"./config-form\";\n\nclass ControlPanel extends Component {\n  render() {\n    return (\n        <section className=\"sidepanel\">\n          <ConfigForm/>\n        </section>\n    );\n  }\n}\n\nexport default ControlPanel;\n","import React, { Component } from 'react';\nimport \"./index.scss\";\nclass List extends Component {\n    state = {\n        widgetOpen : false\n    }\n    toggleOptions(){\n        this.setState({widgetOpen : !this.state.widgetOpen})\n    }\n    render() {\n        return (\n                <ul>\n                    <li> <a>Menu</a> </li>\n                </ul>\n        );\n    }\n}\n\nexport default List;\n","import React, { Component } from 'react';\nimport \"./index.scss\";\nimport List from \"./List\";\n\nclass Header extends Component {\n    state = {\n        widgetOpen : false,\n        addList : false\n    }\n    toggleOptions(){\n        this.setState({widgetOpen : !this.state.widgetOpen})\n    }\n    addItem(value){\n        this.setState({addList : true});\n        this.toggleOptions();\n    }\n  render() {\n    return (\n        <main className=\"editor-panel\">\n          <h2>Generate Header HTML</h2>\n        <header id=\"my-header\">\n        </header>\n        <div className={`widget-options ${this.state.widgetOpen ? \"open\" : \"\"}`}>\n            <a className=\"fab-button\" onClick={()=>this.toggleOptions()}>\n                <span>{this.state.widgetOpen? '-': '+'}</span>\n            </a>\n            <ul>\n                <li>\n                     Text\n                </li>\n                <li>\n                     Logo\n                </li>\n                <li onClick={()=> this.addItem(3)}>\n                     List\n                </li>\n                <li>\n                    Button\n                </li>\n                <li>\n                    Dropdown\n                </li>\n                \n            </ul>\n        </div>\n\n        {this.state.addList ? <List/> : null}\n\n        {/* <div class=\"customise\">\n            <h3>Header Styling</h3>\n            <div>\n                <h3>Justify</h3>\n                <label >\n                    <input type=\"radio\" name=\"Justify\" id=\"\" value=\"flex-start\" checked onClick=\"styleHeader('justifyContent',value)\"/>\n                    left\n                </label>\n                <label >\n                    <input type=\"radio\" name=\"Justify\" id=\"\" value=\"flex-end\" onClick=\"styleHeader('justifyContent',value)\"/>\n                    right\n                </label>\n                <label >\n                    <input type=\"radio\" name=\"Justify\" id=\"\" value=\"center\" onClick=\"styleHeader('justifyContent',value)\"/>\n                    center\n                </label>\n                <label >\n                    <input type=\"radio\" name=\"Justify\" id=\"\" value=\"space-between\" onClick=\"styleHeader('justifyContent',value)\"/>\n                    space between\n                </label>\n                <label >\n                    <input type=\"radio\" name=\"Justify\" id=\"\" value=\"space-around\" onClick=\"styleHeader('justifyContent',value)\"/>\n                    space around\n                </label>\n            </div>\n        </div> */}\n        </main>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport \"./index.scss\";\nclass List extends Component {\n    state = {\n        widgetOpen : false,\n        items: [ {text: \"menu\", link: \"/menu\"}]\n    }\n    toggleOptions(){\n        this.setState({widgetOpen : !this.state.widgetOpen})\n    }\n    itemUpdate(e,val,index){\n        const items = this.state.items;\n        if(val === 1) items[index].text = e.target.value \n        else items[index].link = e.target.value \n        this.setState({\n            items\n        });\n        this.props.onListChange(this.state.items);\n    }\n    addItem(){\n        this.setState(prevState => ({\n            items: [...prevState.items, {text: \"menu\", link: \"/menu\"}]\n        }))\n        this.props.onListChange(this.state.items);\n    }\n    componentDidMount(){\n        this.props.onListChange(this.state.items);\n    }\n    render() {\n        return (\n                <div className=\"editor-list\">\n                    <h3>List</h3>\n                    <ul >\n                        {\n                            this.state.items.map((item, i) => \n                            <li key={i} > \n                            <label>Text \n                            <input type=\"text\" defaultValue={item.text} onChange={(e) => this.itemUpdate(e,1,i)}/>\n                            </label>\n                            <label>Link \n                            <input type=\"text\" defaultValue={item.link} onChange={(e)=>this.itemUpdate(e,2,i)} />\n                            </label>\n                            </li>)\n                        }\n                        <button className=\"blue-button\" onClick={()=> this.addItem()}>Add Item</button>\n                    </ul>\n                </div>\n        );\n    }\n}\n\nexport default List;\n","import React, { Component } from 'react';\nimport \"./index.scss\";\nclass Logo extends Component {\n    render() {\n        return <p>Logo</p>\n    }\n}\n\nexport default Logo;\n","import React, { Component } from 'react';\nimport \"./index.scss\";\nimport List from \"./List\";\nimport Logo from \"./Logo\";\n\nclass Editor extends Component {\n    state = {\n        widgetOpen : false,\n        addList : false,\n        list:[]\n    }\n    toggleOptions(){\n        this.setState({widgetOpen : !this.state.widgetOpen})\n    }\n    addItem(value){\n        if(value === 3)  this.setState({addList : true});\n        if(value === 2)  this.setState({addLogo : true});\n        this.toggleOptions();\n    }\n    onListChange(val) {\n        console.log(val)\n        this.setState({list : val})\n        console.log(this.state.list)\n\n    }\n  render() {\n    return (\n        <main className=\"editor-panel\">\n          <h2>Generate Header HTML</h2>\n        <header id=\"my-header\">\n            <ul>\n                {\n                    this.state.list ? this.state.list.map((item, i) => \n                    <li key={i} > <a href={item.link}>{item.text} </a> \n                    </li>): null\n                }\n            </ul>\n                    \n        </header>\n        <div className={`widget-options ${this.state.widgetOpen ? \"open\" : \"\"}`}>\n            <a  className=\"fab-button\" onClick={()=>this.toggleOptions()}>\n                <span>{this.state.widgetOpen? '-': '+'}</span>\n            </a>\n            <ul>\n                <li>\n                     Text\n                </li>\n                <li onClick={()=> this.addItem(2)}>\n                     Logo\n                </li>\n                <li onClick={()=> this.addItem(3)}>\n                     List\n                </li>\n                <li>\n                    Button\n                </li>\n                \n            </ul>\n        </div>\n\n        {this.state.addList ? <List onListChange={(val)=>this.onListChange(val)}/> : null}\n        {this.state.addLogo ? <Logo/> : null}\n        {/* {this.state.addList ? <Button/> : null} */}\n        {/* {this.state.addList ? <Dropdown/> : null} */}\n\n        </main>\n    );\n  }\n}\n\nexport default Editor;\n","import React, { Component } from 'react';\nimport './App.css';\nimport {ControlPanel,Header} from \"./components\";\nimport Editor from './components/editor';\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <ControlPanel/>\n        <Editor/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}